name: Create or Overwrite ECR Repository

on:
  push:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: eu-west-2
  ECR_REPOSITORY_NAME: my-ecr-repository
  ECS_CLUSTER_NAME: my-ecs-cluster
  ECS_SERVICE_NAME: my-ecs-service
  TASK_DEFINITION: my-task

jobs:
  AWS-Credentials:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Delete existing ECR repository
      run: |
        set +e
        aws ecr delete-repository --repository-name $ECR_REPOSITORY_NAME --force
        set -e

    - name: Create ECR repository
      run: |
        aws ecr create-repository --repository-name $ECR_REPOSITORY_NAME
           
    - name: Authenticate Docker to ECR
      run: |
        # Retrieve an authentication token and authenticate Docker client to ECR
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 438337256072.dkr.ecr.eu-west-2.amazonaws.com
        

    - name: Build Docker image
      run: |
        # Build Docker image and tag it with ECR repository name
        docker build -t my-ecr-repository .
        
     
    - name: Tag Docker image
      run: |
        # Tag Docker image with ECR repository URI and latest tag
        docker tag my-ecr-repository:latest 438337256072.dkr.ecr.eu-west-2.amazonaws.com/my-ecr-repository:latest
        
    
    - name: Push Docker image
      run: |
        # Push Docker image to ECR repository
        docker push 438337256072.dkr.ecr.eu-west-2.amazonaws.com/my-ecr-repository:latest
        
     
    - name: Create ECS cluster
      run: |
        # Create ECS cluster if it doesn't exist
        if : aws ecs describe-clusters --clusters $ECS_CLUSTER_NAME; then
          aws ecs create-cluster --cluster-name $ECS_CLUSTER_NAME
        fi
   
    - name: Create ECS task definition
      run: |
        # Create task definition
        aws ecs register-task-definition \
        --family my-task \
        --cpu 256 \
        --memory 512 \
        --requires-compatibilities FARGATE \
        --network-mode awsvpc \
        --container-definitions "$(cat container-definitions.json)"
        
        
    - name: Create ECS service
      run: |
        # Create ECS service
        aws ecs update-service \
        --cluster $ECS_CLUSTER_NAME \
        --service $ECS_SERVICE_NAME \   # <-- Added --service option
        --task-definition $TASK_DEFINITION \
        --desired-count 1 \
        --launch-type "FARGATE" \
        --network-configuration "awsvpcConfiguration={subnets=[subnet-0706b4048585c49a5,subnet-0e55b90760129e32a,subnet-059ad7ce46c3ff353],securityGroups=[sg-0df2999a37e8bd4e8],assignPublicIp=ENABLED}" \
        --force-new-deployment
